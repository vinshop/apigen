package repositories

import (
    "github.com/jinzhu/gorm"
    "context"
    "{{.Model.Pkg}}"
)

type {{.Name}} interface {
    FindOne(ctx context.Context, model *models.{{.Model.Name}}, preloads ...string) error
    FindMany(ctx context.Context, where map[string]interface{}, page int64, limit int64, order string, preload ...string) (int64, []*models.{{.Model.Name}}, error)
    Create(ctx context.Context, model *models.{{.Model.Name}}) error
    Update(ctx context.Context, model *models.{{.Model.Name}}) error
    Delete(ctx context.Context, model *models.{{.Model.Name}}) error
}

func New{{.Name}}(db *gorm.DB) {{.Name}} {
    return &{{.ImpName}} {
        db: db,
    }
}

type {{.ImpName}} struct {
    db *gorm.DB
}

func (r *{{.ImpName}}) getDB(ctx context.Context) *gorm.DB {
    if ctx == nil {
        return r.db
    }
    db, ok := ctx.Value("db").(*gorm.DB)
    if !ok || db == nil {
        return r.db
    }
    return db
}

func (r *{{.ImpName}}) preloads(db *gorm.DB, preloads ...string) *gorm.DB {
    for _, preload := range preloads {
        db = db.Preload(preload)
    }
    return db
}

func (r *{{.ImpName}}) FindOne(ctx context.Context, model *models.{{.Model.Name}}, preloads ...string) error {
    if model.ID == 0 {
		return gorm.ErrRecordNotFound
	}
    return r.preloads(r.getDB(ctx), preloads...).First(model).Error
}

func (r *{{.ImpName}}) Create(ctx context.Context, model *models.{{.Model.Name}}) error {
    return r.getDB(ctx).Create(model).Error
}

func (r *{{.ImpName}}) Update(ctx context.Context, model *models.{{.Model.Name}}) error {
    return r.getDB(ctx).Model(model).Update(model).Error
}

func (r *{{.ImpName}}) Delete(ctx context.Context, model *models.{{.Model.Name}}) error {
    return r.getDB(ctx).Delete(model).Error
}

func (r *{{.ImpName}}) FindMany(ctx context.Context, where map[string]interface{}, page int64, limit int64, order string, preloads ...string) (int64, []*models.{{.Model.Name}}, error) {
    var result []*models.{{.Model.Name}}

    db := r.getDB(ctx).Model(&models.{{.Model.Name}}{})

    for k, v := range where {
        db = db.Where(k, v)
    }

    var total int64

    if err := db.Count(&total).Error; err != nil {
        return -1, nil, err
    }

    db = r.preloads(db, preloads...)

    if err := db.Find(&result).Offset((page - 1) * limit).Limit(limit).Order(order).Error; err != nil {
        return -1, nil, err
    }
    return total, result, nil




}