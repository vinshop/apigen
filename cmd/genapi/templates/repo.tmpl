package repositories

import (
    "github.com/jinzhu/gorm"
    "context"
    "{{.Model.Pkg}}"
)

type {{.Name}} interface {
    BaseRepository
    FindOne(ctx context.Context, model *models.{{.Model.Name}}, preloads ...string) error
    FindMany(ctx context.Context, where map[interface{}]interface{}, op *PaginationOption, preloads ...string) ([]*models.{{.Model.Name}}, error)
    Create(ctx context.Context, model *models.{{.Model.Name}}) error
    Update(ctx context.Context, model *models.{{.Model.Name}}) error
    Delete(ctx context.Context, model *models.{{.Model.Name}}) error
}

func New{{.Name}}(db *gorm.DB) {{.Name}} {
    return &{{.ImpName}} {
        baseRepository{db},
    }
}

type {{.ImpName}} struct {
    baseRepository
}

func (r *{{.ImpName}}) preloads(db *gorm.DB, preloads ...string) *gorm.DB {
    for _, preload := range preloads {
        db = db.Preload(preload)
    }
    return db
}

func (r *{{.ImpName}}) FindOne(ctx context.Context, model *models.{{.Model.Name}}, preloads ...string) error {
    if model.ID == 0 {
		return gorm.ErrRecordNotFound
	}
    return r.preloads(r.GetDB(ctx), preloads...).First(model).Error
}

func (r *{{.ImpName}}) Create(ctx context.Context, model *models.{{.Model.Name}}) error {
    return r.GetDB(ctx).Create(model).Error
}

func (r *{{.ImpName}}) Update(ctx context.Context, model *models.{{.Model.Name}}) error {
    return r.GetDB(ctx).Model(model).Update(model).Error
}

func (r *{{.ImpName}}) Delete(ctx context.Context, model *models.{{.Model.Name}}) error {
    return r.GetDB(ctx).Delete(model).Error
}

func (r *{{.ImpName}}) FindMany(ctx context.Context, where map[interface{}]interface{}, op *PaginationOption, preloads ...string) ([]*models.{{.Model.Name}}, error) {
	var result []*models.{{.Model.Name}}

	db := r.GetDB(ctx).Model(&models.{{.Model.Name}}{})

	for k, v := range where {
		db = db.Where(k, v)
	}

	db.Count(&op.Total)

	db = op.Apply(db)

	db = r.preloads(db, preloads...)

	if err := db.Find(&result).Error; err != nil {
		return nil, err
	}
	op.CalcTotalPage()
	return result, nil
}